#
# mapSoN config file
#
# You may use environment variables in the data part of each directive.
# The following variables are guaranteed to be set:
#
#    MAILBOXDIR  The mailbox directoy as determined at compile-time
#    MTA         The mta as determined at compile-time
#    DATADIR     The data directory as determined at compile-time
#    USER        The name of the user mapson is running under
#    HOME        The home directory of that user
#
# The values shown in this file are the default settings; so this
# config files changes effectively nothing.

# Mailbox <file>

#       This option specifies the complete path to the user's mailbox
#       file. That is the location where mapSoN will store incoming
#       e-mail that passed. If the first character of the configured
#       mailbox is a pipe ("|"),the string here will be interpreted as
#       a command to which the mail is piped for delivery, for
#       instance:
#           |/usr/sbin/sendmail other@address.example.org
Mailbox            ${MAILBOXDIR}/${USER}

# SpoolDir <directory>
#       This option specifies the complete path to the directory, in which
#       mapSoN will spool incoming e-mails that do not pass the test and
#       require a confirmation. The directory will be created if it does
#       not exist.
SpoolDir           ${HOME}/.mapson/spool

# AddressDB <file>
#       This option specifies the complete path the file mapSoN will use to
#       store the known addresses. The file will be created if it does not
#       exist.
AddressDB          ${HOME}/.mapson/address-db

# AddressDBAutoAdd <boolean>
#       This option defines whether to add confirmed addresses to the
#       database, as some people may want to do this manually ... The
#       default is to add them automatically, though.
AddressDBAutoAdd   true

# ReqConfirmTemplate <file>[:<file>:<file>...]
#       This option specifies a list of possible filenames for the
#       template file, mapSoN uses to send out a request for
#       confirmation. Each filename must be separated by a colon, and
#       mapSoN will try each of them, actually using the first file
#       that can be opened successfully.
ReqConfirmTemplate ${HOME}/.mapson/reqmail.template:${DATADIR}/reqmail.template

# MTA <command>
#       This option specifies the command mapSoN invokes in order to
#       deliver a request-for-confirmation e-mail. The expanded template
#       file will be piped into this command on the standard input channel.
MTA                ${MTA} '-f<>' -i -t

# PassIncorrectMails <boolean>
#       This option determines how mapSoN will deal with RFC syntax errors
#       in the incoming e-mail. If PassIncorrectMails is set to "true",
#       mapSoN will terminate and return the return code configured via the
#       SyntaxErrorRC directive when it detects an error. If this option is
#       set to "false", mapSoN will ignore syntax errors as far as
#       possible.
PassIncorrectMails true

# StrictRFCParser <boolean>
#       If this option is set to "false", mapSoN's RFC parser will parse
#       only the headers it has to -- that is, all headers that contain
#       addresses. If StrictRFCParser is set to "true", mapSoN will parse
#       _all_ headers of the incoming e-mail. Obviously, enabling the
#       strict parser makes only sense if PassIncorrectMails is disabled.
StrictRFCParser    false

# RuntimeErrorRC <int>
#       This option specifies the return code mapSoN should return in case
#       it encounters a run-time error such as failure to open the address
#       data base file, etc. These return codes are interpreted by the MTA
#       that called mapSoN and determine what the MTA should do with the
#       mail.
#
#       Valid return codes are in the range of 0 <= rc <= 128.
RuntimeErrorRC     75

# SyntaxErrorRC <int>
#       This option specifies the return code mapSoN should return in case
#       it encounters a syntax error in the incoming e-mail. These return
#       codes are interpreted by the MTA that called mapSoN and determine
#       what the MTA should do with the mail.
#
#       Valid return codes are in the range of 0 <= rc <= 128.
SyntaxErrorRC      65

# LogFile <file>
#       This option specifies the complete path of the file mapSoN will use
#       to log its actions. The file will be created if it does not exist.
LogFile            ${HOME}/.mapson/log

# Debug <boolean>
#       If this option is set to "true", mapSoN will log extensive
#       debugging information. Please note that debug information is only
#       available if the program has been compiled with "DEBUG" defined by
#       the pre-processor. Otherwise, this option is ignored.
Debug              false
