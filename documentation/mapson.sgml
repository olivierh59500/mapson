<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
<!ENTITY mapson "<application>mapSoN</application>">
<!ENTITY description SYSTEM "description.sgml">
<!ENTITY building SYSTEM "building.sgml">
<!ENTITY synopsis SYSTEM "synopsis.sgml">
<!ENTITY cmdloptions SYSTEM "cmdloptions.sgml">
<!ENTITY license SYSTEM "license.sgml">
<!ENTITY defconfig SYSTEM "defconfig.sgml">
<!ENTITY defreqmail SYSTEM "defreqmail.sgml">
]>

<article lang="en" revision="$Revision$">
  <articleinfo>
    <title>&mapson; User Manual</title>
    <author>
      <firstname>Peter</firstname>
      <surname>Simons</surname>
      <affiliation>
        <address><email>simons@computer.org</email></address>
      </affiliation>
    </author>
  </articleinfo>

  <sect1>
    <title>Introduction</title>

    &description;

    <para>This manual describes how to compile, install, and configure &mapson;
in various setups.</para>
  </sect1>

  <sect1>
    <title>Building &mapson;</title>
    &building;
  </sect1>

  <sect1>
    <title>Command Line Syntax</title>
    &synopsis;
    &cmdloptions;
  </sect1>

  <sect1>
    <title>The &mapson; Configuration File</title>

    <para>The configuration file may contain the following directives:</para>

    <variablelist>
      <varlistentry>
        <term><literal>Mailbox</literal> <parameter>file</parameter></term>
        <listitem>
          <para>This directive sets the complete path of the mailbox file, where
&mapson; stores approved mails.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>SpoolDir</literal> <parameter>directory</parameter></term>
        <listitem>
          <para>This directive sets the complete path to the directory, in which
deferred mails will be spooled until a confirmation arrives for them.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>AddressDB</literal> <parameter>file</parameter></term>
        <listitem>
          <para>This directive sets the complete path of the file &mapson; uses
to store the "known" addresses.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>ReqConfirmTemplate</literal> <parameter>file</parameter></term>
        <listitem>
          <para>This directive sets the complete path to the
request-for-confirmation template file &mapson; uses to generate the
request-for-confirmation mail sent to first-time originators.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>MTA</literal> <parameter>command</parameter></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>PassIncorrectMails</literal> <parameter>boolean</parameter></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>StrictRFCParser</literal> <parameter>boolean</parameter></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>RuntimeErrorRC</literal> <parameter>integer</parameter></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>SyntaxErrorRC</literal> <parameter>integer</parameter></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>Debug</literal> <parameter>boolean</parameter></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>In the data part of these tags, you may use any of the following
environment variables, which are provided my &mapson;:</para>

    <variablelist>
      <varlistentry>
        <term><varname>$MAILBOXDIR</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$MTA</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$DATADIR</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$USER</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$HOME</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
  </sect1>

  <sect1>
    <title>The Request-for-Confirmation File</title>

    <para>The request-for-confirmation mail is created by loading the configured
template file and exanding the variables contained in it. The result is then
piped into the command, you have configured as <varname>MTA</varname>.</para>

    <para>The following variables are provided in the request-for-confirmation
mail template file:</para>

    <variablelist>
      <varlistentry>
        <term><varname>$md5hash</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$envelope</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$sender</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$return_path</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$header</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$body</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$messageid</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>In addition to those, the following arrays are provided:</para>

    <variablelist>
      <varlistentry>
        <term><varname>$headerlines[]</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <varlistentry>
        <term><varname>$header[]</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <varlistentry>
        <term><varname>$body[]</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>

  <sect1>
    <title>How to Activate &mapson;</title>

    <sect2>
      <title>Via <filename>.forward</filename></title>

      <blockquote>
        <programlisting>"|exec <replaceable>/usr/local/bin/mapson</replaceable>"</programlisting>
      </blockquote>
    </sect2>

    <sect2>
      <title>Via <filename>.procmailrc</filename></title>

      <blockquote>
        <programlisting># Pipe anything, that is not a reply or comes from a mailing
# list, into mapson for approval.
#
:0 w
* !^(In-Reply-To|References|Message-Id):.*<replaceable>example.com</replaceable>
* !^Precedence: (list|bulk|junk)
* !^Auto-Submitted:
| <replaceable>/usr/local/mapson/bin/mapson</replaceable></programlisting>
      </blockquote>

      <sect3>
        <title>Getting a Notification In Case of Failure</title>

      <para>You might want to add the recipt

        <blockquote>
          <programlisting>:0 ec
| /usr/bin/sed -e 's/^/ | /' | \
/bin/mail -s "mapSoN failed on this mail" <replaceable>postmaster</replaceable></programlisting>
        </blockquote>

directly after the &mapson; call. This action will only be executed if the
previous repict failed with an error, and will send a notification of the fact
that mapson failed to <systemitem class="username">postmaster</systemitem> or
whoever is responsible for the mail system on your site.</para>

      <para>Adding this recipt is <emphasis>not</emphasis> a good idea, though,
if you're letting &mapson; fail for mails that have syntax errors!</para>
      </sect3>

      <sect3>
        <title>Using <application>procmail</application>`s "argument"
feature</title>

        <blockquote>
          <programlisting>ARGUMENT="$1"

# An argument of 'failsafe' will always by-pass all other
# rules to make sure that I have a reliably working address
# no matter what happens here.
#
:0
* ARGUMENT ?? failsafe
$DEFAULT

# Confirmation mails go into mapSoN.
# Note: Not all systems support that regular expression syntax!
#
:0
* ARGUMENT ?? [a-f0-9]{32}
| <replaceable>/usr/local/mapson/bin/mapson</replaceable>
:0 ec

# Anything that has such an argument is probably coming from
# a mailing list and should not go through mapSoN.
#
:0
* ARGUMENT ?? ..*
$DEFAULT</programlisting>
        </blockquote>
      </sect3>
    </sect2>
  </sect1>

  <sect1>
    <title>Expiring the Mail Spool</title>

    <para>
  </sect1>

  <appendix>
    <title>License</title>

    &license;
  </appendix>

  <appendix>
    <title>The Default Configuration</title>
    <programlisting>&defconfig;</programlisting>
  </appendix>

  <appendix>
    <title>A Request-for-Confirmation Template Example</title>
    <programlisting>&defreqmail;</programlisting>
  </appendix>

</article>
