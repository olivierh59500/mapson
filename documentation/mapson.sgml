<!--
Local Variables:
mode: sgml
fill-column:80
End:
-->
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
<!ENTITY mapson "<application>mapSoN</application>">
<!ENTITY description SYSTEM "description.inc">
<!ENTITY building SYSTEM "building.inc">
<!ENTITY synopsis SYSTEM "synopsis.inc">
<!ENTITY cmdloptions SYSTEM "cmdloptions.inc">
<!ENTITY license SYSTEM "license.inc">
<!ENTITY defconfig SYSTEM "defconfig.inc">
<!ENTITY defreqmail SYSTEM "defreqmail.inc">
]>

<article lang="en" revision="$Revision$">
  <articleinfo>
    <title>Incomplete &mapson; User Manual</title>
    <author>
      <firstname>Peter</firstname>
      <surname>Simons</surname>
      <affiliation>
        <address><email>simons@computer.org</email></address>
      </affiliation>
    </author>
  </articleinfo>

  <sect1>
    <title>Introduction</title>

    &description;

    <para>This manual describes how to compile, install, and configure &mapson;
in various setups.</para>
  </sect1>

  <sect1>
    <title>Building &mapson;</title>
    &building;
  </sect1>

  <sect1>
    <title>Command Line Syntax</title>

    <para>&mapson understans severel optional parameters an the
command line, which allow you to override the compiled-in default or
the settings in the config file. The standard Unix synopsis line
is:</para>

    <blockquote>
      &synopsis;
    </blockquote>

    <para>Here is a list of all options together with a short
description of what the respective option does:</para>

    &cmdloptions;
  </sect1>

  <sect1>
    <title>The &mapson; Configuration File</title>

    <para>The configuration file may contain the following directives:</para>

    <variablelist>
      <varlistentry>
        <term><literal>Mailbox</literal> <parameter>file</parameter></term>
        <listitem>
          <para>This directive sets the complete path of the mailbox file, where
&mapson; stores approved mails.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>SpoolDir</literal> <parameter>directory</parameter></term>
        <listitem>
          <para>This directive sets the complete path to the directory, in which
deferred mails will be spooled until a confirmation arrives for them.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>AddressDB</literal> <parameter>file</parameter></term>
        <listitem>
          <para>This directive sets the complete path of the file &mapson; uses
to store the "known" addresses.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>ReqConfirmTemplate</literal> <parameter>file</parameter></term>
        <listitem>
          <para>This directive sets the complete path to the
request-for-confirmation template file &mapson; uses to generate the
request-for-confirmation mail sent to first-time originators.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>MTA</literal> <parameter>command</parameter></term>
        <listitem>
          <para>This directive sets the command &mapson will use to
send-out a request-for-confirmation mail. The actual mail will be
piped into the started process.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>PassIncorrectMails</literal> <parameter>boolean</parameter></term>
        <listitem>
          <para>When &mapson; parses the incoming mail's headers for
the addresses, it may detect syntax errors in the mail header, that do
not cause a fatal error, but that surely hint to the fact that this
mail was not created by an RFC822-conformant mail client.</para>

          <para>Many spam mails contain incorrect header lines, so you
may chose to have &mapson fail on <emphasis>any</emphasis> syntax
error -- even non-fatal ones. "Failing" means that &mapson; will abort
and return the return code configured below to the
<abbrev>MTA</abbrev>. Depending on the setting of the return code, the
MTA will then bounce the mail.</para>

          <para>The parameter given to this option is a boolean,
meaning that you may specify either <literal>yes</literal> or
<literal>no</literal>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>StrictRFCParser</literal> <parameter>boolean</parameter></term>
        <listitem>
          <para>If you enable this option by specifying
<literal>yes</literal>, &mapson; will perform additional syntax checks
on the incoming mail, if you say <literal>no</literal>, it will check
only those headers that are needed for &mapson; to operate at
all.</para>

          <para>Enabling this option makes little sense unless you
disable the <symbol>PassIncorrectMails</symbol> option.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>RuntimeErrorRC</literal> <parameter>integer</parameter></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
      <varlistentry>

        <term><literal>SyntaxErrorRC</literal> <parameter>integer</parameter></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>Debug</literal> <parameter>boolean</parameter></term>
        <listitem>
          <para>If you enable debugging messages by saying
<literal>yes</literal> here, &mapson; will log additional information
about its procssing of the mail. If you say <literal>no</literal>,
&mapson; will log only very few messages at all.</para>

          <para>Debugging is available only when the binary has been
compiled with the <symbol>DEBUG</symbol> symbol defined. Currently,
that is the default, though, so unless you exclicitely disabled it,
debugging will be available.</para>
        </listitem>
      </varlistentry>

    </variablelist>



    <para>In the data part of these tags, you may use any of the following
environment variables, which are provided my &mapson;:</para>

    <variablelist>
      <varlistentry>
        <term><varname>$MAILBOXDIR</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$MTA</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$DATADIR</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$USER</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$HOME</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
  </sect1>

  <sect1>
    <title>The Request-for-Confirmation File</title>

    <para>The request-for-confirmation mail is created by loading the configured
template file and exanding the variables contained in it. The result is then
piped into the command, you have configured as <varname>MTA</varname>.</para>

    <para>The following variables are provided in the request-for-confirmation
mail template file:</para>

    <variablelist>
      <varlistentry>
        <term><varname>$md5hash</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$envelope</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$sender</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$return_path</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$header</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$body</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$messageid</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>In addition to those, the following arrays are provided:</para>

    <variablelist>
      <varlistentry>
        <term><varname>$headerlines[]</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <varlistentry>
        <term><varname>$header[]</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <varlistentry>
        <term><varname>$body[]</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>

  <sect1>
    <title>How to Activate &mapson;</title>

    <para>Before you can activate &mapson; you have to make sure that
all required directories exist and that all required files can be
created. &mapson; will try to create the address database file, for
instance, but the default setting is that this database is located at
<filename>$HOME/.mapon/address-db</filename>, and &mapson;
<emphasis>will not</emphasis> create the
<filename>$HOME/.mapson</filename> directory.</para>

    <para>The same applies to the mail spool directory, where &mapson;
stores those mails that need a confirmation before they are delivered.
The default location is <filename>$HOME/.mapson/spool</filename>, and
&mapson will create the spool directory itself, but it won't create
the <filename>$HOME/.mapson</filename> directory.</para>

    <para>The cut a long story short: Create the directory
<filename>.mapson</filename> in your home directory before you try to
use &mapson;. If you changed the configuration, though, the locations
may vary.</para>

    <para>Once that's out of the way, you need to create a template
file that &mapson; will use to generate the request-for-confirmation
mail. The installation process has created you a sample file for this
purpose to
<filename>/usr/local/share/mapson/reqmail.template-sample</filename>,
so thats probably a good starting point.</para>

    <sect2>
      <title>Via <filename>.forward</filename></title>

      <blockquote>
        <programlisting>"|exec <replaceable>/usr/local/bin/mapson</replaceable>"</programlisting>
      </blockquote>
    </sect2>

    <sect2>
      <title>Via <filename>.procmailrc</filename></title>

      <blockquote>
        <programlisting># Pipe anything, that is not a reply or comes from a mailing
# list, into mapson for approval.
#
:0 w
* !^(In-Reply-To|References|Message-Id):.*<replaceable>example.com</replaceable>
* !^Precedence: (list|bulk|junk)
* !^Auto-Submitted:
| <replaceable>/usr/local/mapson/bin/mapson</replaceable></programlisting>
      </blockquote>

      <sect3>
        <title>Getting a Notification In Case of Failure</title>

      <para>You might want to add the recipt

        <blockquote>
          <programlisting>:0 ec
| /usr/bin/sed -e 's/^/ | /' | \
/bin/mail -s "mapSoN failed on this mail" <replaceable>postmaster</replaceable></programlisting>
        </blockquote>

directly after the &mapson; call. This action will only be executed if the
previous repict failed with an error, and will send a notification of the fact
that mapson failed to <systemitem class="username">postmaster</systemitem> or
whoever is responsible for the mail system on your site.</para>

      <para>Adding this recipt is <emphasis>not</emphasis> a good idea, though,
if you're letting &mapson; fail for mails that have syntax errors!</para>
      </sect3>

      <sect3>
        <title>Using <application>procmail</application>`s "argument"
feature</title>

        <blockquote>
          <programlisting>ARGUMENT="$1"

# An argument of 'failsafe' will always by-pass all other
# rules to make sure that I have a reliably working address
# no matter what happens here.
#
:0
* ARGUMENT ?? failsafe
$DEFAULT

# Confirmation mails go into mapSoN.
# Note: Not all systems support that regular expression syntax!
#
:0
* ARGUMENT ?? [a-f0-9]{32}
| <replaceable>/usr/local/mapson/bin/mapson</replaceable>
:0 ec

# Anything that has such an argument is probably coming from
# a mailing list and should not go through mapSoN.
#
:0
* ARGUMENT ?? ..*
$DEFAULT</programlisting>
        </blockquote>
      </sect3>
    </sect2>
  </sect1>

  <sect1>
    <title>Expiring the Mail Spool</title>

    <para>
  </sect1>

  <sect1>
    <title>Importing Addresses From a Mail Archive</title>

    <para>Of course it would be unpolite to have &mapson; send out
requests for confirmation to people who you have been communicating
with you for months or years, just because you installed a new
tool. If you were wise enough to archive your old e-mails, there's a
simple way to avoid that happening: Import their addresses into
&mapson;'s database.</para>

    <para>Unfortunately, most mail readers archive old mails in one
single file: Each new mail is just appended at the end, just like the
mailbox format itself. Currently, &mapson; can not deal with those
files. The current version can import addresses only from an archive
where a each mail is stored in a separate file, like the archives
maintained by the <application>Gnus</application> software, that is
part of <application>Emacs</application>, for example.</para>

    <para>In this case, though, it's simple enough: Just start
&mapson; and give it the file names as parameters on the command line.
You might want to enable debugging by giving it the
<option>-d</option> flag, so that you can see what's going on:</para>

    <informalexample>
      <screen>simons@peti:~/mail-archive$ mapson -d *
1:
12:
    simons@peti.gmd.de................................. new
16:
    simons@peti.gmd.de................................. known
17:
    th@example.com..................................... new
    th@example.com..................................... known
    th@example.com..................................... known
19:
    bscw@cscwmail.example.org.......................... new
    manfred.bogen@gmd.example.org...................... new
53:
    pakhomenko@example.com............................. new
    pakhomenko@example.com............................. known
</screen>
    </informalexample>

    <para>Depending on the size of your mail archive, this may take a
while, but usually &mapson; is pretty quick.</para>

    <para>Once that's finished, you'll have a pretty good database to
start with, and it's highly unlikely that someone, who has been in
contact with you before, will be bothered with an
request-for-confirmation mail.</para>
  </sect1>

  <appendix>
    <title>License</title>
    &license;
  </appendix>

  <appendix>
    <title>The Default Configuration</title>
    <programlisting>&defconfig;</programlisting>
  </appendix>

  <appendix>
    <title>A Request-for-Confirmation Template Example</title>
    <programlisting>&defreqmail;</programlisting>
  </appendix>

</article>
