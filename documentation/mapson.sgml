<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
<!ENTITY mapson "<application>mapSoN</application>">
<!ENTITY description SYSTEM "description.inc">
<!ENTITY building SYSTEM "building.inc">
<!ENTITY synopsis SYSTEM "synopsis.inc">
<!ENTITY cmdloptions SYSTEM "cmdloptions.inc">
<!ENTITY configfile SYSTEM "configfile.inc">
<!ENTITY license SYSTEM "license.inc">
<!ENTITY defconfig SYSTEM "defconfig.inc">
<!ENTITY defreqmail SYSTEM "defreqmail.inc">
]>

<article lang="en">
  <articleinfo>
    <title>Incomplete &mapson; User Manual</title>
    <author>
      <firstname>Peter</firstname>
      <surname>Simons</surname>
      <affiliation>
        <address><email>simons@computer.org</email></address>
      </affiliation>
    </author>
  </articleinfo>

  <sect1>
    <title>Introduction</title>

    &description;

    <para>This manual describes how to compile, install, and configure &mapson;
in various setups.</para>
  </sect1>

  <sect1>
    <title>Building &mapson;</title>
    &building;
  </sect1>

  <sect1>
    <title>Command Line Syntax</title>

    <para>&mapson understans severel optional parameters an the
command line, which allow you to override the compiled-in default or
the settings in the config file. The standard Unix synopsis line
is:</para>

    <blockquote>
      &synopsis;
    </blockquote>

    <para>Here is a list of all options together with a short
description of what the respective option does:</para>

    &cmdloptions;
  </sect1>

  <sect1>
    <title>The &mapson; Configuration File</title>
    &configfile;
  </sect1>

  <sect1>
    <title>The Request-for-Confirmation File</title>

    <para>The request-for-confirmation mail is created by loading the configured
template file and exanding the variables contained in it. The result is then
piped into the command, you have configured as <varname>MTA</varname>.</para>

    <para>The following variables are provided in the request-for-confirmation
mail template file:</para>

    <variablelist>
      <varlistentry>
        <term><varname>$md5hash</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$envelope</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$sender</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$return_path</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$header</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$body</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>$messageid</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>In addition to those, the following arrays are provided:</para>

    <variablelist>
      <varlistentry>
        <term><varname>$headerlines[]</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <varlistentry>
        <term><varname>$header[]</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <varlistentry>
        <term><varname>$body[]</varname></term>
        <listitem>
          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>

  <sect1>
    <title>How to Activate &mapson;</title>

    <para>Before you can activate &mapson; you have to make sure that
all required directories exist and that all required files can be
created. &mapson; will try to create the address database file, for
instance, but the default setting is that this database is located at
<filename>$HOME/.mapon/address-db</filename>, and &mapson;
<emphasis>will not</emphasis> create the
<filename>$HOME/.mapson</filename> directory.</para>

    <para>The same applies to the mail spool directory, where &mapson;
stores those mails that need a confirmation before they are delivered.
The default location is <filename>$HOME/.mapson/spool</filename>, and
&mapson will create the spool directory itself, but it won't create
the <filename>$HOME/.mapson</filename> directory.</para>

    <para>The cut a long story short: Create the directory
<filename>.mapson</filename> in your home directory before you try to
use &mapson;. If you changed the configuration, though, the locations
may vary.</para>

    <para>Once that's out of the way, you need to create a template
file that &mapson; will use to generate the request-for-confirmation
mail. The installation process has created you a sample file for this
purpose to
<filename>/usr/local/share/mapson/reqmail.template-sample</filename>,
so thats probably a good starting point.</para>

    <para>Then, all that's left to do is to hook mapson into your mail
system so that incoming e-mails are no longer delivered to your
mailbox directly but are piped into &mapson;. How you can do this
depends on the setup you have. The following sections will give you
detailed instructions for the different scenarios.</para>

    <sect2>
      <title>Via <filename>.forward</filename></title>

      <para>If you're using a plain
<application>sendmail</application> installation, and don't have any
fancy local mailers like <application>procmail</application>
installed, you can activate &mapson; by writing an appropriate
pipe-command to the file <filename>.forward</filename> in your home
directory:</para>

      <blockquote>
        <programlisting>"|exec <replaceable>/usr/local/bin/mapson</replaceable>"</programlisting>
      </blockquote>

      <para>Apparently, on some systems the home directory must grant
execute-permission to "other" for the <acronym>MTA</acronym> to
evaluate that file. So if you created the
<filename>.forward</filename> file as shown above and still there's no
sign of any &mapson; activity, execute <userinput>chmod 711
$HOME</userinput> and try again.</para>

      <para>Another potential obstacle is that some
<application>sendmail</application> installation use the restricted
shell (<acronym>smrsh</acronym>) for the execution of the local
mailer. This shell will not allow users to execute arbitrary commands
in the <filename>.forward</filename> file. If your system uses the
smrsh, you must create a link from
<filename>/usr/local/bin/mapson</filename> to
<filename>/usr/adm/sm.bin/mapson</filename> in order to enable
&mapson;. (The paths may vary from system to system,
obviously.)</para>
    </sect2>

    <sect2>
      <title>Via <filename>.procmailrc</filename></title>

      <para>Most systems these days use
<application>procmail</application> to deliver local mail. That means,
that you can configure your local mailer by adding cryptic recipts in
an entirely undocumented syntax to the file
<filename>.procmailrc</filename> in your home directory.</para>

      <para>The good thing about <application>procmail</application>
is that it gives you way more control over which e-mail is going
where. For example, you don't want to pipe mail through &mapson; that
has been delivered to you via a mailing list: It would be really gross
to request confirmation for a mail from someone who doesn't even know
you and hasn't even mailed you -- all he did was to post on a mailing
list.</para>

      <para>Unfortunately, recognizing mail that came from a mailing
list is not an easy thing to do, but the following
<application>procmail</application> recipt should work pretty good:</para>

      <blockquote>
        <programlisting># Pipe anything, that is not a reply or comes from a mailing
# list, into mapson for approval.
#
:0 w
* !^(In-Reply-To|References|Message-Id):.*<replaceable>example.com</replaceable>
* !^Precedence: (list|bulk|junk)
* !^Auto-Submitted:
| <replaceable>/usr/local/mapson/bin/mapson</replaceable></programlisting>
      </blockquote>

      <para>Using <application>procmail</application>`s "argument"
feature, you can make this work even better, but that is still marked
TODO in this manual &hellip; Here are the recipts, nonetheless, in
case you think you know what you're doing.</para>

        <blockquote>
          <programlisting>ARGUMENT="$1"

# An argument of 'failsafe' will always by-pass all other
# rules to make sure that I have a reliably working address
# no matter what happens here.
#
:0
* ARGUMENT ?? failsafe
$DEFAULT

# Confirmation mails go into mapSoN.
# Note: Not all systems support that regular expression syntax!
#
:0
* ARGUMENT ?? [a-f0-9]{32}
| <replaceable>/usr/local/mapson/bin/mapson</replaceable>
:0 ec

# Anything that has such an argument is probably coming from
# a mailing list and should not go through mapSoN.
#
:0
* ARGUMENT ?? ..*
$DEFAULT</programlisting>
      </blockquote>
    </sect2>
  </sect1>

  <sect1>
    <title>Expiring the Mail Spool</title>

    <para>
  </sect1>

  <sect1>
    <title>Importing Addresses From a Mail Archive</title>

    <para>Of course it would be unpolite to have &mapson; send out
requests for confirmation to people who you have been communicating
with you for months or years, just because you installed a new
tool. If you were wise enough to archive your old e-mails, there's a
simple way to avoid that happening: Import their addresses into
&mapson;'s database.</para>

    <para>Unfortunately, most mail readers archive old mails in one
single file: Each new mail is just appended at the end, just like the
mailbox format itself. Currently, &mapson; can not deal with those
files. The current version can import addresses only from an archive
where a each mail is stored in a separate file, like the archives
maintained by the <application>Gnus</application> software, that is
part of <application>Emacs</application>, for example.</para>

    <para>In this case, though, it's simple enough: Just start
&mapson; and give it the file names as parameters on the command line.
You might want to enable debugging by giving it the
<option>-d</option> flag, so that you can see what's going on:</para>

    <informalexample>
      <screen>simons@peti:~/mail-archive$ mapson -d *
1:
12:
    simons@peti.gmd.de................................. new
16:
    simons@peti.gmd.de................................. known
17:
    th@example.com..................................... new
    th@example.com..................................... known
    th@example.com..................................... known
19:
    bscw@cscwmail.example.org.......................... new
    manfred.bogen@gmd.example.org...................... new
53:
    pakhomenko@example.com............................. new
    pakhomenko@example.com............................. known
</screen>
    </informalexample>

    <para>Depending on the size of your mail archive, this may take a
while, but usually &mapson; is pretty quick.</para>

    <para>Once that's finished, you'll have a pretty good database to
start with, and it's highly unlikely that someone, who has been in
contact with you before, will be bothered with an
request-for-confirmation mail.</para>
  </sect1>

  <sect1>
    <title>What To Do If Something Does Not Work</title>

    <para>There's a chance that &mapson; isn't working the way you expect it --
especially in the current unfinished state of the program. Here's a short
description of how you can probably figure what's going wrong. The magic word is
"log file". &mapson; logs pretty much everything it does to a file, which is per
default located at <filename>$HOME/.mapson/log</filename>.</para>

    <para>A typical set of messages found there may look like this:</para>

    <informalexample>
      <screen>debug: mapSoN verion 2.0-beta-2 starting up
debug: My configuration:
debug:     Mailbox            = '/var/spool/mail/'
debug:     ConfigFile         = 'config-sample'
debug:     SpoolDir           = '/.mapson/spool'
debug:     AddressDB          = '/.mapson/address-db'
debug:     ReqConfirmTemplate = '/.mapson/reqmail.template: \
    /usr/local/mapson/share/mapson/reqmail.template'
debug:     MTA                = '/usr/sbin/sendmail '-f&lt;&gt;' -i -t'
debug:     StrictRFCParser    = 'false'
debug:     PassIncorrectMails = 'true'
debug:     RuntimeErrorRC     = '75'
debug:     SyntaxErrorRC      = '65'
debug:     Debug              = 'true'
error: Runtime error while processing mail 'no-message-id': \
    Can't open address db '/.mapson/address-db' for reading: No such \
    file or directory</screen>
    </informalexample>

    <para>Please note that the backslashes in this example are not actually
there, they just denote added line breaks for the layout. In the real file,
these split lines are just one one long line.</para>

    <para>If you find that your copy of &mapson; does not log the proceedings in
this amount of detail, set the <userinput>Debug</userinput> directive in the
configuration file to <userinput>yes</userinput> or add the
<parameter>-d</parameter> parameter to the command line when calling
&mapson;.</para>

    <para>By looking at the log file, you can see what exactly &mapson; is doing
and why it's doing it. In the example shown above, it fails because of a file
permission error.</para>

    <para>Of course there are some reasons that may cause &mapson; to behave in
a way different from what you execpted that are not directly connected to the
&mapson; program itself. Here's a list of popular mistakes:</para>

    <itemizedlist>
      <listitem>
        <para>Check whether the mailbox file &mapson; uses to deliver passed
mails is correct! If it is not, you obviously won't see anything.</para>
      </listitem>
      <listitem>
        <para>Check whether &mapson; actually <emphasis>sees</emphasis> the
incoming mails it is supposed to. Especially when you are using
<application>procmail</application> to filter incoming e-mail, make sure that
the confirmation mails are passed to &mapson;. You can debug what
<application>procmail</application> is doing by adding the lines</para>

        <informalexample>
          <screen>VERBOSE=on
LOGFILE=$HOME/procmail.log</screen>
        </informalexample>

        <para>to your <filename>.procmailrc</filename> file. Then look at
<application>procmail</application>'s log file.</para>
      </listitem>

      <listitem>
        <para>In case you're using <application>procmail</application> and you
have used the example snippets from this manual to activate &mapson;, there's a
good chance that your system's regular expression library cannot deal with the
expression that's used to direct confirmation mails into &mapson;. As far as I
know, even the latest <application>GNU libc</application> does not support the
repetition of a match in the term <userinput>[a-f0-9]{32}</userinput>. So if you
find that &mapson; does not receive the confirmation mails, try to replace the
line</para>

        <informalexample>
          <screen>* ARGUMENT ?? [a-f0-9]{32}</screen>
        </informalexample>

        <para>in your <filename>.procmailrc</filename> file by the explicit variant</para>

        <informalexample>
          <screen>* ARGUMENT ?? [a-f0-9][a-f0-9][a-f0-9]<replaceable>&hellip;</replaceable>[a-f0-9][a-f0-9]</screen>
        </informalexample>

        <para>where the number of <userinput>[a-f0-9]</userinput> terms is
exactly 32. Yes, I know this sucks big time, but that's the way it is. I will
resist the temptation to get into a big ranting about the fact that there's a
perfectly good regular expression engine available as free software for years,
but the GNU people won't use it because it is released under the BSD license.
For once, I won't go into that. :-)</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <appendix>
    <title>License</title>
    &license;
  </appendix>

  <appendix>
    <title>The Default Configuration</title>
    <programlisting>&defconfig;</programlisting>
  </appendix>

  <appendix>
    <title>A Request-for-Confirmation Template Example</title>
    <programlisting>&defreqmail;</programlisting>
  </appendix>

</article>

<!--
Local Variables:
mode: sgml
fill-column:80
End:
-->
