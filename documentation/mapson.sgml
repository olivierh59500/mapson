<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
<!ENTITY mapson "<application>mapSoN</application>">
]>

<refentry id="mapson" lang="en" revision="$Revision$">
  <refmeta>
    <refentrytitle>mapSoN</refentrytitle>
    <manvolnum>1</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>mapson</refname>
    <refpurpose>An automatic spam filter</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>mapson</command>
      <arg choice="opt">-d</arg>
      <arg choice="opt">-c <replaceable>config-file</replaceable></arg>
      <arg choice="opt" rep="repeat"><replaceable>mail</replaceable></arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>

    <para>The amount of unsolicited commercial e-mail ("spam") circulating in
      the Internet today has become unbearable for most people. Many approaches
      have been proposed to stop this junk from filling up your mailboxes, such
      as the <ulink url="http://mail-abuse.org/rbl+/">Real-time blackhole
      list</ulink>, <ulink
      url="http://www.iks-jena.de/mitarb/lutz/usenet/teergrube.en.html">Teergruben</ulink>,
      or <application>procmail</application>-based <ulink
      url="http://junkfilter.zer0.org/">anti-spam recipts</ulink>.</para>

    <para>&mapson; is another anti-spam system, but it uses an approach entirely
      different than those systems named before. Instead of trying to recognize
      spam by the <abbrev>IP</abbrev> address of the <abbrev>SMTP</abbrev>
      dialag's peer or by certain patters in the mail's body, &mapson; uses the
      sender's e-mail address to decide whether the e-mail is delivered to your
      mailbox or not: Any e-mail that comes from a "known" address may pass, any
      e-mail that comes from an e-mail address seen for the first time needs
      special confirmation, before it may pass.</para>

    <para>"Special confirmation" means that &mapson; will generate an
      <abbrev>MD5</abbrev> checksum of the to-be-confirmed mail and stores the
      mail in a temporary spool directory. Then it sends an <firstterm>request
      for confirmation</firstterm> to the address from which the mail was coming
      from. In this request, it will include the <abbrev>MD5</abbrev> checksum
      and ask the recipient to reply back and to quote that <abbrev>MD5</abbrev>
      hash. Once &mapson; sees that <abbrev>MD5</abbrev> hash again, it
      considers that a confirmation of the original mail, delivers the deferred
      mail from the spool to your mailbox, and adds the sender's address to the
      database of known addresses, so that the next time he tries to contact
      you, his mail will pass through &mapson; immediately..</para>

    <para>This heuristic catches almost any spam mail, because spammers have to
      fake their sender addresses in order to avoid being held responsible for
      their abuse. Hence, their address will most likely not be in the database
      of known addresses, nor will they ever receive the request for
      confirmation mail!</para>

    <para>For a complete description of what &mapson; does and how to confirgure
      it, please take a look at the user manual that comes with it. This
      document is only a reference page and does not explain all options in
      detail.</para>
  </refsect1>

  <refsect1>
    <title>Command Line Syntax</title>

    <para>&mapson; understands the following command line parameters:

      <variablelist>
        <varlistentry>
          <term><option>-h</option></term>
          <listitem>
            <para>Show &mapson; usage information.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-d</option></term>
          <listitem>
            <para>Enable debugging. Please note that debugging is only available
              if &mapson; has been compiled with the define
              <symbol>DEBUG</symbol>. Otherwise, the debug code is not included
              in the binary.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-c <replaceable>config</replaceable></option></term>
          <listitem>
            <para>Use the configuration file
              <filename><replaceable>config</replaceable></filename> rather the
              default.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option><replaceable>mail &hellip;</replaceable></option></term>
          <listitem>
            <para>If any parameter is specified on the command line that is not
              an option, &mapson; will go into <firstterm>gather
              addresses</firstterm> mode. The parameters are interpreted as
              filenames, each of the files containing an e-mail that &mapson;
              will parse. Any sender address &mapson; finds in these mails will
              be added to the database of known addresses. This mode is meant to
              import addresses from your mail archive to the database.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsect1>

  <refsect1>
    <title>License</title>

    <para>This software is copyrighted by Peter Simons
      <email>simons@computer.org</email>. Permission is granted to use it under
      the terms of the GNU General Public License. For further details, refer to
      the file <filename>LICENSE</filename> included in the software
      distribution or see <ulink
      url="http://www.gnu.org/licenses/gpl.html">http://www.gnu.org/licenses/gpl.html</ulink>
      in case that file is missing.</para>

    <para>&mapson; uses the Variable Expression Library, which is included in
      the distribution for comfort. This library is <emphasis>not</emphasis>
      part of the &mapson; package and is licensed under the terms described in
      the file <filename>libvarexp/LICENSE</filename>. Should that file be
      missing in your distribution, contact me for a copy.</para>
  </refsect1>

</refentry>
